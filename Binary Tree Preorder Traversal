/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    // public List<Integer> preorderTraversal(TreeNode root) {
    //     List<Integer> list=new ArrayList<Integer>();
    //     dfs(root,list);
    //     return list;
    // }
    // private void dfs(TreeNode root,List<Integer> list){
    //     if(root==null)return;
    //     list.add(root.val);
    //     dfs(root.left,list);
    //     dfs(root.right,list);
    // }
    public List<Integer> preorderTraversal(TreeNode node) {
        List<Integer> list=new LinkedList<Integer>();
        Stack<TreeNode> rights=new Stack<TreeNode>();
        while(node!=null){
            list.add(node.val);
            if(node.right!=null)rights.push(node.right);
            if(node.left==null && !rights.isEmpty()){
                node=rights.pop();
            }
            else
                node=node.left;
        }
        return list;
    }
}
